diff --git a/lld/ELF/Config.h b/lld/ELF/Config.h
index 28726d48e428..f425df303b80 100644
--- a/lld/ELF/Config.h
+++ b/lld/ELF/Config.h
@@ -100,7 +100,7 @@ enum class SeparateSegmentKind { None, Code, Loadable };
 enum class GnuStackKind { None, Exec, NoExec };
 
 // For --lto=
-enum LtoKind : uint8_t {UnifiedThin, UnifiedRegular, Default};
+enum LtoKind : uint8_t { UnifiedThin, UnifiedRegular, Default };
 
 // For -z gcs=
 enum class GcsPolicy { Implicit, Never, Always };
@@ -123,11 +123,14 @@ struct VersionDefinition {
 class LinkerDriver {
 public:
   void linkerMain(ArrayRef<const char *> args);
+  void linkerMain(llvm::MemoryBuffer *buffer, ArrayRef<const char *> argsArr);
   void addFile(StringRef path, bool withLOption);
+  void addFile(llvm::MemoryBuffer *buffer, StringRef path, bool withLOption);
   void addLibrary(StringRef name);
 
 private:
   void createFiles(llvm::opt::InputArgList &args);
+  void createFiles(llvm::MemoryBuffer *buffer, llvm::opt::InputArgList &args);
   void inferMachineType();
   template <class ELFT> void link(llvm::opt::InputArgList &args);
   template <class ELFT> void compileBitcodeFiles(bool skipLinkedOutput);
@@ -155,7 +158,8 @@ struct Config {
   uint8_t osabi = 0;
   uint32_t andFeatures = 0;
   llvm::CachePruningPolicy thinLTOCachePolicy;
-  llvm::SetVector<llvm::CachedHashString> dependencyFiles; // for --dependency-file
+  llvm::SetVector<llvm::CachedHashString>
+      dependencyFiles; // for --dependency-file
   llvm::StringMap<uint64_t> sectionStartMap;
   llvm::StringRef bfdname;
   llvm::StringRef chroot;
diff --git a/lld/ELF/Driver.cpp b/lld/ELF/Driver.cpp
index eb6734dfd458..6502738b438b 100644
--- a/lld/ELF/Driver.cpp
+++ b/lld/ELF/Driver.cpp
@@ -66,6 +66,7 @@
 #include "llvm/Support/TargetSelect.h"
 #include "llvm/Support/TimeProfiler.h"
 #include "llvm/Support/raw_ostream.h"
+#include <cstdio>
 #include <cstdlib>
 #include <tuple>
 #include <utility>
@@ -125,6 +126,46 @@ llvm::raw_fd_ostream Ctx::openAuxiliaryFile(llvm::StringRef filename,
 
 namespace lld {
 namespace elf {
+bool link(llvm::MemoryBuffer *buffer, ArrayRef<const char *> args, llvm::raw_ostream &stdoutOS,
+          llvm::raw_ostream &stderrOS, bool exitEarly, bool disableOutput) {
+  // This driver-specific context will be freed later by unsafeLldMain().
+  auto *ctx = new CommonLinkerContext;
+
+  ctx->e.initialize(stdoutOS, stderrOS, exitEarly, disableOutput);
+  ctx->e.cleanupCallback = []() {
+    elf::ctx.reset();
+    symtab = SymbolTable();
+
+    outputSections.clear();
+    symAux.clear();
+
+    tar = nullptr;
+    in.reset();
+
+    partitions.clear();
+    partitions.emplace_back();
+
+    SharedFile::vernauxNum = 0;
+  };
+  ctx->e.logName = args::getFilenameWithoutExe(args[0]);
+  ctx->e.errorLimitExceededMsg = "too many errors emitted, stopping now (use "
+                                 "--error-limit=0 to see all errors)";
+
+  config = ConfigWrapper();
+  script = ScriptWrapper();
+
+  symAux.emplace_back();
+
+  partitions.clear();
+  partitions.emplace_back();
+
+  config->progName = args[0];
+  elf::ctx.driver.linkerMain(buffer, args);
+  auto error = errorCount();
+  CommonLinkerContext::destroy();
+  return error == 0;
+}
+
 bool link(ArrayRef<const char *> args, llvm::raw_ostream &stdoutOS,
           llvm::raw_ostream &stderrOS, bool exitEarly, bool disableOutput) {
   // This driver-specific context will be freed later by unsafeLldMain().
@@ -235,8 +276,8 @@ std::vector<std::pair<MemoryBufferRef, uint64_t>> static getArchiveMembers(
     v.push_back(std::make_pair(mbref, c.getChildOffset()));
   }
   if (err)
-    fatal(mb.getBufferIdentifier() + ": Archive::children failed: " +
-          toString(std::move(err)));
+    fatal(mb.getBufferIdentifier() +
+          ": Archive::children failed: " + toString(std::move(err)));
 
   // Take ownership of memory buffers created for members of thin archives.
   std::vector<std::unique_ptr<MemoryBuffer>> mbs = file->takeThinBuffers();
@@ -353,6 +394,101 @@ void LinkerDriver::addFile(StringRef path, bool withLOption) {
   }
 }
 
+void LinkerDriver::addFile(llvm::MemoryBuffer *buffer, StringRef path,
+                                     bool withLOption) {
+  using namespace sys::fs;
+  MemoryBufferRef mbref;
+  if(path.compare("from_memory") == 0){
+    assert(buffer && "buffer is NULL");
+    mbref = *buffer;
+  }else{
+    std::optional<MemoryBufferRef> buffer = readFile(path);
+    if (!buffer)
+      return;
+    mbref = *buffer;
+  }
+  if (config->formatBinary) {
+    files.push_back(make<BinaryFile>(mbref));
+    return;
+  }
+
+  switch (identify_magic(mbref.getBuffer())) {
+  case file_magic::unknown:
+    readLinkerScript(mbref);
+    return;
+  case file_magic::archive: {
+    auto members = getArchiveMembers(mbref);
+    if (inWholeArchive) {
+      for (const std::pair<MemoryBufferRef, uint64_t> &p : members) {
+        if (isBitcode(p.first))
+          files.push_back(make<BitcodeFile>(p.first, path, p.second, false));
+        else if (!tryAddFatLTOFile(p.first, path, p.second, false))
+          files.push_back(createObjFile(p.first, path));
+      }
+      return;
+    }
+
+    archiveFiles.emplace_back(path, members.size());
+
+    // Handle archives and --start-lib/--end-lib using the same code path. This
+    // scans all the ELF relocatable object files and bitcode files in the
+    // archive rather than just the index file, with the benefit that the
+    // symbols are only loaded once. For many projects archives see high
+    // utilization rates and it is a net performance win. --start-lib scans
+    // symbols in the same order that llvm-ar adds them to the index, so in the
+    // common case the semantics are identical. If the archive symbol table was
+    // created in a different order, or is incomplete, this strategy has
+    // different semantics. Such output differences are considered user error.
+    //
+    // All files within the archive get the same group ID to allow mutual
+    // references for --warn-backrefs.
+    bool saved = InputFile::isInGroup;
+    InputFile::isInGroup = true;
+    for (const std::pair<MemoryBufferRef, uint64_t> &p : members) {
+      auto magic = identify_magic(p.first.getBuffer());
+      if (magic == file_magic::elf_relocatable) {
+        if (!tryAddFatLTOFile(p.first, path, p.second, true))
+          files.push_back(createObjFile(p.first, path, true));
+      } else if (magic == file_magic::bitcode)
+        files.push_back(make<BitcodeFile>(p.first, path, p.second, true));
+      else
+        warn(path + ": archive member '" + p.first.getBufferIdentifier() +
+             "' is neither ET_REL nor LLVM bitcode");
+    }
+    InputFile::isInGroup = saved;
+    if (!saved)
+      ++InputFile::nextGroupId;
+    return;
+  }
+  case file_magic::elf_shared_object: {
+    if (config->isStatic) {
+      error("attempted static link of dynamic object " + path);
+      return;
+    }
+
+    // Shared objects are identified by soname. soname is (if specified)
+    // DT_SONAME and falls back to filename. If a file was specified by -lfoo,
+    // the directory part is ignored. Note that path may be a temporary and
+    // cannot be stored into SharedFile::soName.
+    path = mbref.getBufferIdentifier();
+    auto *f =
+        make<SharedFile>(mbref, withLOption ? path::filename(path) : path);
+    f->init();
+    files.push_back(f);
+    return;
+  }
+  case file_magic::bitcode:
+    files.push_back(make<BitcodeFile>(mbref, "", 0, inLib));
+    break;
+  case file_magic::elf_relocatable:
+    if (!tryAddFatLTOFile(mbref, "", 0, inLib))
+      files.push_back(createObjFile(mbref, "", inLib));
+    break;
+  default:
+    error(path + ": unknown file type");
+  }
+}
+
 // Add a given library by searching it from input search paths.
 void LinkerDriver::addLibrary(StringRef name) {
   if (std::optional<std::string> path = searchLibrary(name))
@@ -600,6 +736,7 @@ constexpr const char *saveTempsValues[] = {
     "resolution", "preopt",     "promote", "internalize",  "import",
     "opt",        "precodegen", "prelink", "combinedindex"};
 
+
 void LinkerDriver::linkerMain(ArrayRef<const char *> argsArr) {
   ELFOptTable parser;
   opt::InputArgList args = parser.parse(argsArr.slice(1));
@@ -689,6 +826,95 @@ void LinkerDriver::linkerMain(ArrayRef<const char *> argsArr) {
   }
 }
 
+void LinkerDriver::linkerMain(llvm::MemoryBuffer *buffer, ArrayRef<const char *> argsArr) {
+  ELFOptTable parser;
+  opt::InputArgList args = parser.parse(argsArr.slice(1));
+
+  // Interpret these flags early because error()/warn() depend on them.
+  errorHandler().errorLimit = args::getInteger(args, OPT_error_limit, 20);
+  errorHandler().fatalWarnings =
+      args.hasFlag(OPT_fatal_warnings, OPT_no_fatal_warnings, false) &&
+      !args.hasArg(OPT_no_warnings);
+  errorHandler().suppressWarnings = args.hasArg(OPT_no_warnings);
+
+  // Handle -help
+  if (args.hasArg(OPT_help)) {
+    printHelp();
+    return;
+  }
+
+  // Handle -v or -version.
+  //
+  // A note about "compatible with GNU linkers" message: this is a hack for
+  // scripts generated by GNU Libtool up to 2021-10 to recognize LLD as
+  // a GNU compatible linker. See
+  // <https://lists.gnu.org/archive/html/libtool/2017-01/msg00007.html>.
+  //
+  // This is somewhat ugly hack, but in reality, we had no choice other
+  // than doing this. Considering the very long release cycle of Libtool,
+  // it is not easy to improve it to recognize LLD as a GNU compatible
+  // linker in a timely manner. Even if we can make it, there are still a
+  // lot of "configure" scripts out there that are generated by old version
+  // of Libtool. We cannot convince every software developer to migrate to
+  // the latest version and re-generate scripts. So we have this hack.
+  if (args.hasArg(OPT_v) || args.hasArg(OPT_version))
+    message(getLLDVersion() + " (compatible with GNU linkers)");
+
+  if (const char *path = getReproduceOption(args)) {
+    // Note that --reproduce is a debug option so you can ignore it
+    // if you are trying to understand the whole picture of the code.
+    Expected<std::unique_ptr<TarWriter>> errOrWriter =
+        TarWriter::create(path, path::stem(path));
+    if (errOrWriter) {
+      tar = std::move(*errOrWriter);
+      tar->append("response.txt", createResponseFile(args));
+      tar->append("version.txt", getLLDVersion() + "\n");
+      StringRef ltoSampleProfile = args.getLastArgValue(OPT_lto_sample_profile);
+      if (!ltoSampleProfile.empty())
+        readFile(ltoSampleProfile);
+    } else {
+      error("--reproduce: " + toString(errOrWriter.takeError()));
+    }
+  }
+
+  readConfigs(args);
+  checkZOptions(args);
+
+  // The behavior of -v or --version is a bit strange, but this is
+  // needed for compatibility with GNU linkers.
+  if (args.hasArg(OPT_v) && !args.hasArg(OPT_INPUT))
+    return;
+  if (args.hasArg(OPT_version))
+    return;
+
+  // Initialize time trace profiler.
+  if (config->timeTraceEnabled)
+    timeTraceProfilerInitialize(config->timeTraceGranularity, config->progName);
+
+  {
+    llvm::TimeTraceScope timeScope("ExecuteLinker");
+
+    initLLVM();
+    createFiles(buffer, args);
+    if (errorCount())
+      return;
+
+    inferMachineType();
+    setConfigs(args);
+    checkOptions();
+    if (errorCount())
+      return;
+
+    invokeELFT(link, args);
+  }
+
+  if (config->timeTraceEnabled) {
+    checkError(timeTraceProfilerWrite(
+        args.getLastArgValue(OPT_time_trace_eq).str(), config->outputFile));
+    timeTraceProfilerCleanup();
+  }
+}
+
 static std::string getRpath(opt::InputArgList &args) {
   SmallVector<StringRef, 0> v = args::getStrings(args, OPT_rpath);
   return llvm::join(v.begin(), v.end(), ":");
@@ -1272,7 +1498,8 @@ static void readConfigs(opt::InputArgList &args) {
   config->debugNames = args.hasFlag(OPT_debug_names, OPT_no_debug_names, false);
   config->demangle = args.hasFlag(OPT_demangle, OPT_no_demangle, true);
   config->dependencyFile = args.getLastArgValue(OPT_dependency_file);
-  config->dependentLibraries = args.hasFlag(OPT_dependent_libraries, OPT_no_dependent_libraries, true);
+  config->dependentLibraries =
+      args.hasFlag(OPT_dependent_libraries, OPT_no_dependent_libraries, true);
   config->disableVerify = args.hasArg(OPT_disable_verify);
   config->discard = getDiscard(args);
   config->dwoDir = args.getLastArgValue(OPT_plugin_opt_dwo_dir_eq);
@@ -1297,8 +1524,8 @@ static void readConfigs(opt::InputArgList &args) {
       args.hasArg(OPT_shared);
   config->filterList = args::getStrings(args, OPT_filter);
   config->fini = args.getLastArgValue(OPT_fini, "_fini");
-  config->fixCortexA53Errata843419 = args.hasArg(OPT_fix_cortex_a53_843419) &&
-                                     !args.hasArg(OPT_relocatable);
+  config->fixCortexA53Errata843419 =
+      args.hasArg(OPT_fix_cortex_a53_843419) && !args.hasArg(OPT_relocatable);
   config->cmseImplib = args.hasArg(OPT_cmse_implib);
   config->cmseInputLib = args.getLastArgValue(OPT_in_implib);
   config->cmseOutputLib = args.getLastArgValue(OPT_out_implib);
@@ -1387,8 +1614,7 @@ static void readConfigs(opt::InputArgList &args) {
       args.hasFlag(OPT_print_gc_sections, OPT_no_print_gc_sections, false);
   config->printMemoryUsage = args.hasArg(OPT_print_memory_usage);
   config->printArchiveStats = args.getLastArgValue(OPT_print_archive_stats);
-  config->printSymbolOrder =
-      args.getLastArgValue(OPT_print_symbol_order);
+  config->printSymbolOrder = args.getLastArgValue(OPT_print_symbol_order);
   config->rejectMismatch = !args.hasArg(OPT_no_warn_mismatch);
   config->relax = args.hasFlag(OPT_relax, OPT_no_relax, true);
   config->relaxGP = args.hasFlag(OPT_relax_gp, OPT_no_relax_gp, false);
@@ -1417,7 +1643,8 @@ static void readConfigs(opt::InputArgList &args) {
   config->singleRoRx = !args.hasFlag(OPT_rosegment, OPT_no_rosegment, true);
   config->soName = args.getLastArgValue(OPT_soname);
   config->sortSection = getSortSection(args);
-  config->splitStackAdjustSize = args::getInteger(args, OPT_split_stack_adjust_size, 16384);
+  config->splitStackAdjustSize =
+      args::getInteger(args, OPT_split_stack_adjust_size, 16384);
   config->strip = getStrip(args);
   config->sysroot = args.getLastArgValue(OPT_sysroot);
   config->target1Rel = args.hasFlag(OPT_target1_rel, OPT_target1_abs, false);
@@ -1731,7 +1958,7 @@ static void readConfigs(opt::InputArgList &args) {
         getPackDynRelocs(args);
   }
 
-  if (auto *arg = args.getLastArg(OPT_symbol_ordering_file)){
+  if (auto *arg = args.getLastArg(OPT_symbol_ordering_file)) {
     if (args.hasArg(OPT_call_graph_ordering_file))
       error("--symbol-ordering-file and --call-graph-order-file "
             "may not be used together");
@@ -1897,6 +2124,137 @@ static bool isFormatBinary(StringRef s) {
   return false;
 }
 
+
+void LinkerDriver::createFiles(llvm::MemoryBuffer *buffer, opt::InputArgList &args) {
+  llvm::TimeTraceScope timeScope("Load input files");
+  // For --{push,pop}-state.
+  std::vector<std::tuple<bool, bool, bool>> stack;
+
+  // -r implies -Bstatic and has precedence over -Bdynamic.
+  config->isStatic = config->relocatable;
+
+  // Iterate over argv to process input files and positional arguments.
+  std::optional<MemoryBufferRef> defaultScript;
+  InputFile::isInGroup = false;
+  bool hasInput = false, hasScript = false;
+  for (auto *arg : args) {
+    switch (arg->getOption().getID()) {
+    case OPT_library:
+      addLibrary(arg->getValue());
+      hasInput = true;
+      break;
+    case OPT_INPUT:
+      addFile(buffer, arg->getValue(), /*withLOption=*/false);
+      hasInput = true;
+      break;
+    case OPT_defsym: {
+      StringRef from;
+      StringRef to;
+      std::tie(from, to) = StringRef(arg->getValue()).split('=');
+      if (from.empty() || to.empty())
+        error("--defsym: syntax error: " + StringRef(arg->getValue()));
+      else
+        readDefsym(from, MemoryBufferRef(to, "--defsym"));
+      break;
+    }
+    case OPT_script:
+    case OPT_default_script:
+      if (std::optional<std::string> path = searchScript(arg->getValue())) {
+        if (std::optional<MemoryBufferRef> mb = readFile(*path)) {
+          if (arg->getOption().matches(OPT_default_script)) {
+            defaultScript = mb;
+          } else {
+            readLinkerScript(*mb);
+            hasScript = true;
+          }
+        }
+        break;
+      }
+      error(Twine("cannot find linker script ") + arg->getValue());
+      break;
+    case OPT_as_needed:
+      config->asNeeded = true;
+      break;
+    case OPT_format:
+      config->formatBinary = isFormatBinary(arg->getValue());
+      break;
+    case OPT_no_as_needed:
+      config->asNeeded = false;
+      break;
+    case OPT_Bstatic:
+    case OPT_omagic:
+    case OPT_nmagic:
+      config->isStatic = true;
+      break;
+    case OPT_Bdynamic:
+      if (!config->relocatable)
+        config->isStatic = false;
+      break;
+    case OPT_whole_archive:
+      inWholeArchive = true;
+      break;
+    case OPT_no_whole_archive:
+      inWholeArchive = false;
+      break;
+    case OPT_just_symbols:
+      if (std::optional<MemoryBufferRef> mb = readFile(arg->getValue())) {
+        files.push_back(createObjFile(*mb));
+        files.back()->justSymbols = true;
+      }
+      break;
+    case OPT_in_implib:
+      if (armCmseImpLib)
+        error("multiple CMSE import libraries not supported");
+      else if (std::optional<MemoryBufferRef> mb = readFile(arg->getValue()))
+        armCmseImpLib = createObjFile(*mb);
+      break;
+    case OPT_start_group:
+      if (InputFile::isInGroup)
+        error("nested --start-group");
+      InputFile::isInGroup = true;
+      break;
+    case OPT_end_group:
+      if (!InputFile::isInGroup)
+        error("stray --end-group");
+      InputFile::isInGroup = false;
+      ++InputFile::nextGroupId;
+      break;
+    case OPT_start_lib:
+      if (inLib)
+        error("nested --start-lib");
+      if (InputFile::isInGroup)
+        error("may not nest --start-lib in --start-group");
+      inLib = true;
+      InputFile::isInGroup = true;
+      break;
+    case OPT_end_lib:
+      if (!inLib)
+        error("stray --end-lib");
+      inLib = false;
+      InputFile::isInGroup = false;
+      ++InputFile::nextGroupId;
+      break;
+    case OPT_push_state:
+      stack.emplace_back(config->asNeeded, config->isStatic, inWholeArchive);
+      break;
+    case OPT_pop_state:
+      if (stack.empty()) {
+        error("unbalanced --push-state/--pop-state");
+        break;
+      }
+      std::tie(config->asNeeded, config->isStatic, inWholeArchive) =
+          stack.back();
+      stack.pop_back();
+      break;
+    }
+  }
+
+  if (defaultScript && !hasScript)
+    readLinkerScript(*defaultScript);
+  if (files.empty() && !hasInput && errorCount() == 0)
+    error("no input files");
+}
+
 void LinkerDriver::createFiles(opt::InputArgList &args) {
   llvm::TimeTraceScope timeScope("Load input files");
   // For --{push,pop}-state.
@@ -2014,7 +2372,8 @@ void LinkerDriver::createFiles(opt::InputArgList &args) {
         error("unbalanced --push-state/--pop-state");
         break;
       }
-      std::tie(config->asNeeded, config->isStatic, inWholeArchive) = stack.back();
+      std::tie(config->asNeeded, config->isStatic, inWholeArchive) =
+          stack.back();
       stack.pop_back();
       break;
     }
@@ -3115,10 +3474,12 @@ template <class ELFT> void LinkerDriver::link(opt::InputArgList &args) {
   if (!config->relocatable)
     ctx.inputSections.push_back(createCommentSection());
 
-  // Split SHF_MERGE and .eh_frame sections into pieces in preparation for garbage collection.
+  // Split SHF_MERGE and .eh_frame sections into pieces in preparation for
+  // garbage collection.
   splitSections<ELFT>();
 
-  // Garbage collection and removal of shared symbols from unused shared objects.
+  // Garbage collection and removal of shared symbols from unused shared
+  // objects.
   markLive<ELFT>();
 
   // Make copies of any input sections that need to be copied into each
@@ -3170,7 +3531,8 @@ template <class ELFT> void LinkerDriver::link(opt::InputArgList &args) {
   }
 
   // Two input sections with different output sections should not be folded.
-  // ICF runs after processSectionCommands() so that we know the output sections.
+  // ICF runs after processSectionCommands() so that we know the output
+  // sections.
   if (config->icf != ICFLevel::None) {
     findKeepUniqueSections<ELFT>(args);
     doIcf<ELFT>();
